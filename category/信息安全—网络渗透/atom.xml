<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sun-spots.github.io</id>
    <title>Hexo • Posts by &#34;信息安全—网络渗透&#34; category</title>
    <link href="https://sun-spots.github.io" />
    <updated>2022-01-15T12:05:00.000Z</updated>
    <entry>
        <id>https://sun-spots.github.io/2022/01/15/MySQL%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%8F%8Asql%E6%B3%A8%E5%85%A5/</id>
        <title>MySQL基本语法及sql注入</title>
        <link rel="alternate" href="https://sun-spots.github.io/2022/01/15/MySQL%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%8F%8Asql%E6%B3%A8%E5%85%A5/"/>
        <content type="html">&lt;h1 id=&#34;mysql基本语法及sql注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql基本语法及sql注入&#34;&gt;#&lt;/a&gt; MySQL 基本语法及 sql 注入&lt;/h1&gt;
&lt;h2 id=&#34;课堂导学&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#课堂导学&#34;&gt;#&lt;/a&gt; 课堂导学：&lt;/h2&gt;
&lt;p&gt;Sql 语句的学习主要为渗透中 Sql 注入漏洞打下坚实基础，这样在学 Sql 注入漏洞时才能一马平川。&lt;/p&gt;
&lt;h2 id=&#34;知识框架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#知识框架&#34;&gt;#&lt;/a&gt; 知识框架：&lt;/h2&gt;
&lt;p&gt;1：常见 SQL 语句&lt;/p&gt;
&lt;p&gt;2：SQL 之增删改查&lt;/p&gt;
&lt;p&gt;3：SQL 中 tips&lt;/p&gt;
&lt;p&gt;4：注入中常见的 sql 函数&lt;/p&gt;
&lt;h2 id=&#34;1常见的sql语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1常见的sql语句&#34;&gt;#&lt;/a&gt; 1：常见的 SQL 语句&lt;/h2&gt;
&lt;h3 id=&#34;11sql介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11sql介绍&#34;&gt;#&lt;/a&gt; 1.1：SQL 介绍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;SQL 是用于访问和处理数据库的标准的计算机语言。&lt;/li&gt;
&lt;li&gt;SQL，指结构化查询语言，全称是 Structured Query Language。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;SQL 让您可以访问和处理数据库。&lt;/li&gt;
&lt;li&gt;SQL 是一种 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;简单来说就是按照 数据结构来组织、 存储和管理数据的仓库。&lt;/li&gt;
&lt;li&gt;数据库是以一定方式储存在一起、能与多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 也是一个&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODUlQjMlRTclQjMlQkIlRTUlOUUlOEIlRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTMlRTclQUUlQTElRTclOTAlODYlRTclQjMlQkIlRTclQkIlOUYvNjk2NTEx&#34;&gt;关系型数据库管理系统&lt;/span&gt;，也是最受欢迎的开源软件之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12sql特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12sql特点&#34;&gt;#&lt;/a&gt; 1.2：SQL 特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;SQL 面向数据库执行查询&lt;/li&gt;
&lt;li&gt;SQL 可从数据库取回数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;SQL 可在数据库中插入新的记录&lt;/li&gt;
&lt;li&gt;SQL 可更新数据库中的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;SQL 可从数据库删除记录&lt;/li&gt;
&lt;li&gt;SQL 可创建新数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;SQL 可在数据库中创建新表&lt;/li&gt;
&lt;li&gt;SQL 可在数据库中创建存储过程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;SQL 可在数据库中创建视图&lt;/li&gt;
&lt;li&gt;SQL 可以设置表、存储过程和视图的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13数据库操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13数据库操作&#34;&gt;#&lt;/a&gt; 1.3：数据库操作&lt;/h3&gt;
&lt;h4 id=&#34;连接数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#连接数据库&#34;&gt;#&lt;/a&gt; 连接数据库&lt;/h4&gt;
&lt;p&gt;明文连接&lt;/p&gt;
&lt;p&gt;mysql -h127.0.0.1 -P3306 -uroot -proot  – 明文&lt;/p&gt;
&lt;p&gt;如果连接本地数据库 -h 可以省略 如果服务器端口是 3306，-P 端口号也可以省略&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-h 后面跟的是访问的主机 IP 地址，-u 后面为数据库的用户名，-p 为数据库的密码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mysql -uroot -proot	– 明文&lt;/p&gt;
&lt;p&gt;密文连接&lt;/p&gt;
&lt;p&gt;mysql -uroot -p&lt;/p&gt;
&lt;p&gt;Enter password: ****&lt;/p&gt;
&lt;h4 id=&#34;退出数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#退出数据库&#34;&gt;#&lt;/a&gt; 退出数据库&lt;/h4&gt;
&lt;p&gt;EXIT       -- 方法一&lt;/p&gt;
&lt;p&gt;quit         -- 方法二&lt;/p&gt;
&lt;p&gt;\q            -- 方法三&lt;/p&gt;
&lt;p&gt;ctrl+c      -- 方法四&lt;/p&gt;
&lt;h4 id=&#34;注意&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注意&#34;&gt;#&lt;/a&gt; 注意&lt;/h4&gt;
&lt;p&gt;sql 语句最后以 “;” 结尾&lt;/p&gt;
&lt;h3 id=&#34;14常用的sql语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14常用的sql语句&#34;&gt;#&lt;/a&gt; 1.4：常用的 SQL 语句&lt;/h3&gt;
&lt;p&gt;查询当前数据库版本：		select version ();&lt;/p&gt;
&lt;p&gt;查询当前数据库用户：		select user ();&lt;/p&gt;
&lt;p&gt;查询当前路径：			select @@basedir;   // 该路径为数据库安装的位置&lt;/p&gt;
&lt;p&gt;查询所有数据库：			show databases;&lt;/p&gt;
&lt;p&gt;选择一个数据库：			use + 数据库名；&lt;/p&gt;
&lt;p&gt;查询当前数据库：			select database ();&lt;/p&gt;
&lt;p&gt;查询所有表名：			show tables;&lt;/p&gt;
&lt;p&gt;创建一个数据库：			create database 数据库名；&lt;/p&gt;
&lt;p&gt;删除一个数据库：			drop database 数据库名；&lt;/p&gt;
&lt;p&gt;查询一个表的结构：		desc 表名；&lt;/p&gt;
&lt;h3 id=&#34;15数据库表字段的运用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#15数据库表字段的运用&#34;&gt;#&lt;/a&gt; 1.5：数据库表，字段的运用&lt;/h3&gt;
&lt;h4 id=&#34;数据库表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库表&#34;&gt;#&lt;/a&gt; 数据库表&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;一个数据库通常包含一个或多个表。每个表由一个名字标识（例如 “客户” 或者 “订单”）；表包含带有数据的记录（行）。&lt;/li&gt;
&lt;li&gt;下面的例子是一个名为 “Persons” 的表：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表包含三条记录（每一条对应一个人）和五个列（Id、姓、名、地址和城市），行为一个表的记录，列为一个表的字段&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624934373498-e2d668b2-f1d2-45fe-9cb0-cb4ba430c67d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;sql-dml-和-ddl&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql-dml-和-ddl&#34;&gt;#&lt;/a&gt; SQL DML 和 DDL&lt;/h4&gt;
&lt;p&gt;可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。&lt;/p&gt;
&lt;h4 id=&#34;sql-的-dml-部分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql-的-dml-部分&#34;&gt;#&lt;/a&gt; SQL 的 DML 部分&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SELECT - 从数据库表中获取数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UPDATE - 更新数据库表中的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DELETE - 从数据库表中删除数据（删除数据用 delect，删除表、数据库、视图、索引等用 drop）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;INSERT INTO - 向数据库表中插入数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sql-dml-和-ddl-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql-dml-和-ddl-2&#34;&gt;#&lt;/a&gt; SQL DML 和 DDL&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CREATE DATABASE - 创建新数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ALTER DATABASE - 修改数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CREATE TABLE - 创建新表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ALTER TABLE - 变更（改变）数据库表（此处的修改包括对数据表的数据修改和对表修改）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DROP TABLE - 删除表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CREATE INDEX - 创建索引（搜索键）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DROP INDEX - 删除索引&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SQL 对大小写不敏感；&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;创建表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建表&#34;&gt;#&lt;/a&gt; 创建表&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：create table 数据表名字 (字段 类型 约束 [, 字段 类型 约束]);&lt;/p&gt;
&lt;p&gt;例如：create table student (id int,name varchar (20),add varchar (20),phone varchar (20));&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;约束&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;auto_increment	表示自动增长		// 表示数值会随着数据的插入数值会相应的自动的增加&lt;/p&gt;
&lt;p&gt;not null 			表示不能为空&lt;/p&gt;
&lt;p&gt;primary key 		表示主键&lt;/p&gt;
&lt;p&gt;foreign key	       标识该属性为该表的外键，是与之联系某表的主键&lt;/p&gt;
&lt;p&gt;default 			默认值&lt;/p&gt;
&lt;p&gt;unique        标识该属性的值是唯一的&lt;/p&gt;
&lt;h4 id=&#34;举例针对表常用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#举例针对表常用命令&#34;&gt;#&lt;/a&gt; 举例 (针对表常用命令)&lt;/h4&gt;
&lt;p&gt;在 class 数据库下创建 student 表 (id、name、age、sex、birthday)&lt;/p&gt;
&lt;p&gt;create table student(id int,name varchar(20),age int,sex varchar(20),birthday int);&lt;/p&gt;
&lt;p&gt;查看表结构&lt;/p&gt;
&lt;p&gt;desc student;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/01/1794ff3dcaf4a34d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;各字段的含义解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Null：表示该列是否可以存储 NULL 值（表示该列是否可以为空）。&lt;/li&gt;
&lt;li&gt;Key：表示该列是否已编制索引。PRI 表示该列是表主键的一部分，UNI 表示该列是 UNIQUE 索引的一部分，MUL 表示在列中某个给定值允许出现多次。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Default：表示该列是否有默认值，如果有，值是多少。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extra：表示可以获取的与给定列有关的附加信息，如 AUTO_INCREMENT 等。&lt;/p&gt;
&lt;p&gt;查看创建表时的 CREATE TABLE 语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SHOW CREATE TABLE 表名 \G；   如果不加 \G 参数显示会混乱，加了显示结果易于查看，比较直观。&lt;/p&gt;
&lt;p&gt;该语句的意思是：显示出创建表的 sql 语句。在不适用 “\G” 是现实出的代码有些凌乱。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/01/6fe034e7c07f8f03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/01/672b3469f7aafbf6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;删除表&lt;/p&gt;
&lt;p&gt;drop table student;&lt;/p&gt;
&lt;p&gt;修改表名&lt;/p&gt;
&lt;p&gt;ALTER TABLE 旧表名 RENAME 新表名；&lt;/p&gt;
&lt;h4 id=&#34;举例针对字段常用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#举例针对字段常用命令&#34;&gt;#&lt;/a&gt; 举例 (针对字段常用命令)&lt;/h4&gt;
&lt;p&gt;修改字段名&lt;/p&gt;
&lt;p&gt;ALTER TABLE 表名 CHANGE 旧字段名 新字段名 新数据类型；&lt;/p&gt;
&lt;p&gt;添加字段&lt;/p&gt;
&lt;p&gt;ALTER TABLE &amp;lt;表名&amp;gt; ADD &amp;lt; 新字段名 &amp;gt; &amp;lt; 数据类型 &amp;gt; [约束条件] [FIRST|AFTER 已存在的字段名]；&lt;/p&gt;
&lt;p&gt;ALTER TABLE admin ADD user_name varchar(20) DEFAULT NULL age int(10) DEFAULT NULL;&lt;/p&gt;
&lt;p&gt;新字段名为需要添加的字段的名称；&lt;/p&gt;
&lt;p&gt;FIRST 为可选参数，其作用是将新添加的字段设置为表的第一个字段；&lt;/p&gt;
&lt;p&gt;AFTER 为可选参数，其作用是将新添加的字段添加到指定的已存在的字段名的后面；&lt;/p&gt;
&lt;p&gt;DEFAULT NULL 默认为 NULL。&lt;/p&gt;
&lt;p&gt;删除字段&lt;/p&gt;
&lt;p&gt;ALTER TABLE 表名 DROP 字段名；&lt;/p&gt;
&lt;h3 id=&#34;16mysql常见的数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#16mysql常见的数据类型&#34;&gt;#&lt;/a&gt; 1.6：Mysql 常见的数据类型&lt;/h3&gt;
&lt;h4 id=&#34;数值类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数值类型&#34;&gt;#&lt;/a&gt; 数值类型&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624934729617-62cc7f2f-4fa9-417a-9e0d-286841d9db06.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;日期和时间类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日期和时间类型&#34;&gt;#&lt;/a&gt; 日期和时间类型&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624934749713-cf3fa5ec-36f6-4b34-a011-2760b12394c9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串类型&#34;&gt;#&lt;/a&gt; 字符串类型&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624934764195-2399cd03-1085-434a-b7fc-e3f61a45bc75.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;mysql整数类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql整数类型&#34;&gt;#&lt;/a&gt; MYSQL 整数类型&lt;/h4&gt;
&lt;p&gt;MySQL 主要提供的整数类型有 TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，其属性字段可以添加 AUTO_INCREMENT 自增约束条件。下表中列出了 MySQL 中的数值类型：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624934816867-6ab3d30b-caa2-44e5-a8ca-49c8670ee68e.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;mysql小数类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql小数类型&#34;&gt;#&lt;/a&gt; MYSQL 小数类型&lt;/h4&gt;
&lt;p&gt;浮点类型有两种，分别是单精度浮点数（FLOAT）和双精度浮点数（DOUBLE）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624934874530-d7e8735c-4e13-4881-8525-d2a0fdc21a6b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;mysql字符串类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql字符串类型&#34;&gt;#&lt;/a&gt; MYSQL 字符串类型&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624934920255-a77063dc-41f8-436c-9786-69ec4238dcf9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;VARCHAR 和 TEXT 类型是变长类型，其存储需求取决于列值的实际长度（在前面的表格中用 L 表示），而不是取决于类型的最大可能尺寸。&lt;/p&gt;
&lt;p&gt;例如，一个 VARCHAR (10) 列能保存一个最大长度为 10 个字符的字符串，实际的存储需要字符串的长度 L 加上一个字节以记录字符串的长度。对于字符 “abcd”，L 是 4，而存储要求 5 个字节。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624935054825-2e99e3c2-c4a7-4934-bef6-ec59345fb975.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;对比结果可以看到，CHAR (4) 定义了固定长度为 4 的列，无论存入的数据长度为多少，所占用的空间均为 4 个字节。VARCHAR (4) 定义的列所占的字节数为实际长度加 1。&lt;/p&gt;
&lt;h3 id=&#34;17mysql主键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#17mysql主键&#34;&gt;#&lt;/a&gt; 1.7：Mysql 主键&lt;/h3&gt;
&lt;h4 id=&#34;mysql主键primary-key&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql主键primary-key&#34;&gt;#&lt;/a&gt; MySQL 主键（PRIMARY KEY）&lt;/h4&gt;
&lt;p&gt;&amp;quot;主键（PRIMARY KEY）“的完整称呼是&amp;quot; 主键约束”。&lt;/p&gt;
&lt;h4 id=&#34;选取设置主键约束的字段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#选取设置主键约束的字段&#34;&gt;#&lt;/a&gt; 选取设置主键约束的字段&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;主键约束即在表中定义一个主键来唯一确定表中每一个记录数据的标识符。主键可以是表中的某一列或者多列的组合，其中由多列组合的主键称为复合主键。主键应该遵守下面的规则：每个表只能定义一个主键。&lt;/li&gt;
&lt;li&gt;主键值必须唯一标识表中的每一行，且不能为 NULL，即表中不可能存在两行数据有相同的主键值。这是唯一性原则。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;一个列名只能在复合主键列表中出现一次。&lt;/li&gt;
&lt;li&gt;复合主键不能包含不必要的多余列。当把复合主键的某一列删除后，如果剩下的列构成的主键仍然满足唯一性原则，那么这个复合主键是不正确的。这是最小化原则。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;在创建表时设置主键约束&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在创建表时设置主键约束&#34;&gt;#&lt;/a&gt; 在创建表时设置主键约束&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;在 CREATE TABLE 语句中，主键是通过 PRIMARY KEY 关键字来指定的。&lt;/li&gt;
&lt;li&gt;在定义列的同时指定主键，语法规则如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字段名 数据类型 PRIMARY KEY；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624955289317-bb0970b1-e2b8-4571-8b61-1c8940726e06.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;在创建表时设置复合主键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在创建表时设置复合主键&#34;&gt;#&lt;/a&gt; 在创建表时设置复合主键&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;主键由多个字段联合组成，语法规则如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PRIMARY KEY [字段 1，字段 2，…, 字段 n]；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624955343429-d65002a0-3f2d-4a16-a6d2-6af1919e59d8.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;在修改表时添加主键约束&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在修改表时添加主键约束&#34;&gt;#&lt;/a&gt; 在修改表时添加主键约束&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;在修改数据表时添加主键约束的语法规则为：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ALTER TABLE 表名 ADD PRIMARY KEY (字段名);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624955444811-bff6a946-740e-4f41-b988-35d98f271057.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;mysql唯一约束unique-key&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql唯一约束unique-key&#34;&gt;#&lt;/a&gt; MySQL 唯一约束（UNIQUE KEY）&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2MuYmlhbmNoZW5nLm5ldC9teXNxbC8=&#34;&gt;MySQL&lt;/span&gt; 唯一约束（Unique Key）要求该列唯一，允许为空，但只能出现一个空值。唯一约束可以确保一列或者几列不出现重复值。&lt;/p&gt;
&lt;p&gt;在定义完列之后直接使用 UNIQUE 关键字指定唯一约束，语法规则如下：&lt;/p&gt;
&lt;p&gt;&amp;lt;字段名&amp;gt; &amp;lt; 数据类型 &amp;gt; UNIQUE&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624955931440-b55e2898-adbe-4922-876e-645a52224714.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;mysql查看表中的约束&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql查看表中的约束&#34;&gt;#&lt;/a&gt; MySQL 查看表中的约束&lt;/h4&gt;
&lt;p&gt;查看数据表中的约束语法格式如下：&lt;/p&gt;
&lt;p&gt;SHOW CREATE TABLE &amp;lt;数据表名&amp;gt;;&lt;/p&gt;
&lt;h2 id=&#34;2sql之增删改查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2sql之增删改查&#34;&gt;#&lt;/a&gt; 2：SQL 之增删改查&lt;/h2&gt;
&lt;h3 id=&#34;21添加数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21添加数据&#34;&gt;#&lt;/a&gt; 2.1：添加数据&lt;/h3&gt;
&lt;h4 id=&#34;1为表中所有字段添加数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1为表中所有字段添加数据&#34;&gt;#&lt;/a&gt; ①：为表中所有字段添加数据&lt;/h4&gt;
&lt;p&gt;i：INSERT 语句中指定所有字段名&lt;/p&gt;
&lt;p&gt;语法：INSERT INTO 表名 (字段名 1，字段名 2，…) VALUES (值 1，值 2，…);&lt;/p&gt;
&lt;p&gt;例题：向 student 表中插入（id 为 1，姓名：xiaoqiao，年龄：18，性别：woman，生日：2002）数据。&lt;/p&gt;
&lt;p&gt;insert into student(id,name,age,sex,birthday) values(1,“xiaoqiao”,18,“woman”,“2002”);&lt;/p&gt;
&lt;p&gt;ii：INSERT 语句中不指定字段名&lt;/p&gt;
&lt;p&gt;语法：INSERT INTO 表名 VALUES (值 11，值 2，…);&lt;/p&gt;
&lt;p&gt;例题：向 student 表中插入（id 为 2，姓名：daqiao，年龄：20，性别：woman，生日：2004）数据。&lt;/p&gt;
&lt;p&gt;insert into student values(2,“daqiao”,20,“woman”,“2000”);&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此用法添加的数据数量、数据类型必须要与表中的字段保持一致&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;2为表的指定字段添加数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2为表的指定字段添加数据&#34;&gt;#&lt;/a&gt; ②：为表的指定字段添加数据&lt;/h4&gt;
&lt;p&gt;i：为指定字段添加数据，即只向部分字段添加值，而其它字段的值为表定义时的默认值。&lt;/p&gt;
&lt;p&gt;语法：INSERT INTO 表名（字段 1，字段 2，…）VALUES (值 1，值 2，…);&lt;/p&gt;
&lt;p&gt;例题：向 student 表中插入（id 为 3，姓名：zhouyu，年龄：18，）数据。&lt;/p&gt;
&lt;p&gt;insert into student(id,name,age) values(3,“xaoqiao”,18);&lt;/p&gt;
&lt;h4 id=&#34;3同时添加多条数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3同时添加多条数据&#34;&gt;#&lt;/a&gt; ③：同时添加多条数据&lt;/h4&gt;
&lt;p&gt;语法：INSERT INTO 表名 (字段名 1，字段名 2，…) VALUES （值 1，值 2，…),(值 1，值 2);&lt;/p&gt;
&lt;p&gt;例题：向 student 表中插入（id 为 4，姓名：sunce，年龄：20，性别：man，生日：2004）和（id 为 5，姓名：caocao，年龄：20，性别：man，生日：2004）数据&lt;/p&gt;
&lt;p&gt;insert into student values(4,“sunce”,20,“man”,“2000”),(5,“caocao”,20,“man”,“2000”);&lt;/p&gt;
&lt;h3 id=&#34;22删除数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22删除数据&#34;&gt;#&lt;/a&gt; 2.2：删除数据&lt;/h3&gt;
&lt;h4 id=&#34;1删除部分数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1删除部分数据&#34;&gt;#&lt;/a&gt; ①：删除部分数据&lt;/h4&gt;
&lt;p&gt;i：即删除指定的部分数据，需要使用 WHERE 子句来指定删除记录的条件。（符合 where 的记录将会被删除）&lt;/p&gt;
&lt;p&gt;语法：DELETE FROM 表名 WHERE 条件表达式；&lt;/p&gt;
&lt;p&gt;例题：向 student 表中删除 id 为 1 的数据。&lt;/p&gt;
&lt;p&gt;delete from student where id=1;&lt;/p&gt;
&lt;h4 id=&#34;2删除全部数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2删除全部数据&#34;&gt;#&lt;/a&gt; ②：删除全部数据&lt;/h4&gt;
&lt;p&gt;i：若 DELETE 语句中没有使用 WHERE 语句，则会将表中所有记录都删除。&lt;/p&gt;
&lt;p&gt;语法：DELETE FROM 表名；&lt;/p&gt;
&lt;p&gt;例题：向 student 表中删除所有的数据。&lt;/p&gt;
&lt;p&gt;delete from student ;&lt;/p&gt;
&lt;h3 id=&#34;23修改数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23修改数据&#34;&gt;#&lt;/a&gt; 2.3：修改数据&lt;/h3&gt;
&lt;h4 id=&#34;1update-更新部分数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1update-更新部分数据&#34;&gt;#&lt;/a&gt; ①：UPDATE 更新部分数据&lt;/h4&gt;
&lt;p&gt;i：指更新指定表中的指定记录，使用 WHERE 子句来指定。&lt;/p&gt;
&lt;p&gt;语法：UPDATE 表名 SET 字段名 1 = 值 1，[，字段名 2 = 值 2，…] [ WHERE 条件表达式 ]；&lt;/p&gt;
&lt;p&gt;例题：向 student 表中 id 为 1 的数据中字段 age 改为 16，字段 birthday 改为 2004。&lt;/p&gt;
&lt;p&gt;update student set age=16,birthday=2004 where id=1;&lt;/p&gt;
&lt;h4 id=&#34;2update-更新全部数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2update-更新全部数据&#34;&gt;#&lt;/a&gt; ②：UPDATE 更新全部数据&lt;/h4&gt;
&lt;p&gt;i：若 UPDATE 语句中没有使用 WHERE 语句，则会将表中所有记录都删除。&lt;/p&gt;
&lt;p&gt;语法：UPDATE FROM 表名；&lt;/p&gt;
&lt;p&gt;例题：向 student 表中将 age 字段都该为 17。&lt;/p&gt;
&lt;p&gt;update student set age=17;（表中所有的数据中的 age 字段的值都将改变为 17）&lt;/p&gt;
&lt;h3 id=&#34;24查询数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24查询数据&#34;&gt;#&lt;/a&gt; 2.4：查询数据&lt;/h3&gt;
&lt;h4 id=&#34;1简单查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1简单查询&#34;&gt;#&lt;/a&gt; ①：简单查询&lt;/h4&gt;
&lt;p&gt;i：查询所有字段&lt;/p&gt;
&lt;p&gt;语法：SELECT 字段名 1，字段名 2，…FROM 表名；&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中所有数据。&lt;/p&gt;
&lt;p&gt;SELECT id,name,age ,sex,birthday  FROM student;&lt;/p&gt;
&lt;p&gt;select * from student;（“*” 为通配符，查询所有满足条件的 jilu）&lt;/p&gt;
&lt;p&gt;ii：查询指定的部分字段&lt;/p&gt;
&lt;p&gt;语法：SELECT 字段名 1，字段名 2，… FROM 表名；&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中所有的 name 字段和 sex 字段。&lt;/p&gt;
&lt;p&gt;SELECT name,sex FROM student;&lt;/p&gt;
&lt;p&gt;注意：字段顺序可以更改，则显示的结果也会作出对应的调整。&lt;/p&gt;
&lt;p&gt;（可以指定 where 来筛选指定条件的记录）&lt;/p&gt;
&lt;h4 id=&#34;2按条件查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2按条件查询&#34;&gt;#&lt;/a&gt; ②：按条件查询&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;带关系运算符的查询&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT 字段名 1，字段名 2，…FROM 表名 WHERE 条件表达式；&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 id 为 4 的人的 id 和 name 字段。&lt;/p&gt;
&lt;p&gt;SELECT id,name FROM student  WHERE id=4;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;带 IN 关键字的查询（在… 里面）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT * 字段名 1, 字段名 2,…FROM 表名 WHERE 字段名 [NOT]  IN （元素 1，元素 2，…）；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释：IN 关键字用于判断某个字段的值是否在指定集合中，若在，则该字段所在的记录将会被查询出来&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 id 值为 1,2,3 的记录。&lt;/p&gt;
&lt;p&gt;SELECT * FROM student WHERE  id IN (1,2,3);&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;带 BETWEEN AND  关键字的查询 (在… 之间)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT *  {字段名 1, 字段名 2,… FROM  表名 WHERE 字段名 [ NOT] BETWEEN  值 1  AND  值 2；&lt;/p&gt;
&lt;p&gt;解释：BETWEEN AND 用于判断某个字段的值是否在指定范围之内，若在，则该字段所在的记录会被  查询出来，反之不会。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 id 值在 2~5 之间的人的 id 和 name。&lt;/p&gt;
&lt;p&gt;SELECT id,name FROM student WHERE id BETWEEN 2 AND 5;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;空值查询&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT *  字段名 1，字段名 2，…FROM 表名 WHERE 字段名 IS [NOT] NULL&lt;/p&gt;
&lt;p&gt;解释：在数据表中有些值可能为空值（NULL），空值不同于 0，也不同于空字符串，需要使用 IS NULL 来判断字段的值是否为空值。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 sex 值为空值的记录。&lt;/p&gt;
&lt;p&gt;SELECT * FROM student WHERE sex IS NULL;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：IS NOT NULL 关键字用来查询字段不为空值的记录。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;带 DISTINCT 关键字的查询&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT DISTINCT 字段名 FROM 表名；&lt;/p&gt;
&lt;p&gt;解释：很多表中某些字段的数据存在重复的值，可以使用 DISTINCT 关键字来过滤重复的值，只保留一个值。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 birthday 字段的值，结果中不允许出行重复的值。&lt;/p&gt;
&lt;p&gt;SELECT DISTINCT birthday FROM student;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;带 LIKE 关键字的查询&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;百分号（%）通配符 **(% 在这里表示任意的意思，它可以匹配任意长度且满足条件的字符串)**&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT *  | 字段名 1，字段名 2，…FROM 表名 WHERE 字段名 [NOT] LIKE ‘匹配字符串’;&lt;/p&gt;
&lt;p&gt;解释：匹配任意长度的字符串，包括空字符串。例如，字符串 “c%” 匹配以字符 C 开始，任意长度的字符串，如 “ ct  ”，“ cut ”，“ current ” 等；字符串 “ c% g ” 表示以字符 c 开始，以 g 结尾的字符串；字符串 “ % y% ” 表示包含字符 “ y ” 的字符串，无论 “ y ” 在字符串的什么位置。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 name 字段以字符 “s” 开头的人的 id,name。&lt;/p&gt;
&lt;p&gt;SELECT id,name FROM student  WHERE name LIKE “s%”;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;下划线（_）通配符（只能匹配指定个数的字符串，一个 &amp;quot;-&amp;quot; 表示一个字符）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT * | 字段名 1，字段名 2，…FROM 表名 WHERE 字段名 [NOT] LIKE ‘匹配字符串’;&lt;/p&gt;
&lt;p&gt;解释：下划线通配符只匹配单个字符，若要匹配多个字符，需要使用多个下划线通配符。例如，字符串 “cu_” 匹配以字符串 “ cu ” 开始，长度为 3 的字符，如 “ cut ”，“ cup ”；字符串 “ c_ &lt;em&gt;l” 匹配在 “c” 和 “ l ” 之间包含两个字符的字符串，如 “ cool ”。需要注意的是，在连续使用 “-” 之间不能有空格，例如 “M&lt;/em&gt; _QL” 只能匹配 “MySQL”，不能匹配 “My SQL”。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 name 字段值以 “xia” 开始，以 “ qiao ” 结束，并且中间只有一个字符的记录。&lt;/p&gt;
&lt;p&gt;SELECT * FROM student WHERE name LIKE ‘xia_qiao’;&lt;/p&gt;
&lt;p&gt;注意：若要查询的字段值本来就含有 “%” 或者 “ _ ”, 则要用 “ \ ” 进行转义，如要&lt;strong&gt;查询本身含有 “%” 的字符串，命令应改为 “ %%%”。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;带 AND 关键字的多条件查询（表示交集的关系，&amp;amp; 运算）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT * | 字段名 1，字段名 2，…FROM 表名；&lt;/p&gt;
&lt;p&gt;解释：在使用 SELECT 语句查询数据时，为了增加查询的准确性，可以使用 AND 关键字可以连接两个或多个查询条件。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 id 字段小于 5，并且 sex 字段值为 “woman” 的人的 id 和 name&lt;/p&gt;
&lt;p&gt;SELECT id,name FROM student WHERE id&amp;lt;5 AND sex=‘woman’;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;带 OR 关键字的多条件查询（表示并集的关系，|| 运算）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT * | 字段名 1，字段名 2，…FROM 表名 WHERE 条件表达式 1 OR 条件表达式 2 [… OR 条件表达式 n];&lt;/p&gt;
&lt;p&gt;解释：与 AND 关键字不同，OR 关键字只要满足任意一个条件就会被查询出来。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 id 字段小于 5，或者 sex 字段值为 “woman” 的人的 id 和 name&lt;/p&gt;
&lt;p&gt;SELECT id,name FROM student WHERE id&amp;lt;5 OR sex=‘woman’;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;OR 和 AND 一起使用的情况&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT * | 字段名 1，字段名 2，…FROM 表名；&lt;/p&gt;
&lt;p&gt;解释：&lt;strong&gt;OR 和 AND 一起使用的时候，AND 的优先级高于 OR，因此二者一起使用时，会先运算 AND 两边的表达式，再运算 OR 两边的表达式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 sex 值为 “woman” 或者 sex 值为 “man” 并且 age 字段值为 16 的人的记录&lt;/p&gt;
&lt;p&gt;SELECT * FROM student WHERE sex=‘woman’ OR sex=‘man’  AND age=16;&lt;/p&gt;
&lt;h4 id=&#34;3聚合函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3聚合函数&#34;&gt;#&lt;/a&gt; ③：聚合函数&lt;/h4&gt;
&lt;h4 id=&#34;img&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#img&#34;&gt;#&lt;/a&gt; &lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2942226/1623394440546-a0aaffed-cd97-4d61-ad82-9d76a4ddb747.png&#34; alt=&#34;img&#34;&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;COUNT () 函数：统计所查询的满足条件的记录的总数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT COUNT (*) FROM 表名；&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中一共有多少条记录。&lt;/p&gt;
&lt;p&gt;SELECT COUNT(*) FROM student;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;SUM () 函数：求出表中某个字段所有值的总和&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT  SUM (字段名) FROM 表名；&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 age 字段的总和&lt;/p&gt;
&lt;p&gt;SELECT SUM(age) FROM student;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;AVG () 函数：求出表中某个字段所有值的平均值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT AVG (字段名) FROM 表名；&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中表中 age 字段的平均值。&lt;/p&gt;
&lt;p&gt;SELECT AVG(age) FROM student;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;MAX () 函数：求出表中某个字段所有值的最大值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT MAX (字段名) FROM 表名；&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 age 字段的最大值&lt;/p&gt;
&lt;p&gt;SELECT MAX(age) FROM student;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;MIN () 函数：求出表中某个字段所有值的最小值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT MIN (字段名) FROM 表名；&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中 grade 字段的最小值&lt;/p&gt;
&lt;p&gt;SELECT MIN(age) FROM student;&lt;/p&gt;
&lt;h4 id=&#34;4对查询结果进行排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4对查询结果进行排序&#34;&gt;#&lt;/a&gt; ④：对查询结果进行排序&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;带 ORDER BY 关键字的排序&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT 字段名 1，字段名 2，…FROM 表名 ORDER BY 字段名 1 [ASC | DESC], 字段名 2 [ ASC | DESC ]…;&lt;/p&gt;
&lt;p&gt;解释：在该语法中指定的字段名是对查询结果进行排序的依据 **，ASC 表示升序排列，DESC 表示降序排列，默认情况是升序排列 **。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中的所有记录，并按照 age 字段进行升序排序&lt;/p&gt;
&lt;p&gt;SELECT * FROM student ORDER BY age;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;带 GROUP BY 关键字的分组查询&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT  字段名 1，字段名 2，…FROM 表名 GROUP BY 字段名 1，字段名 2，… [HAVING 条件表达式];&lt;/p&gt;
&lt;p&gt;解释：在对表中数据进行统计的时候，可以使用 GROUP BY 按某个字段或者多个字段进行分组，&lt;strong&gt;字段中值相同的为一组&lt;/strong&gt;，如男生分为一组，女生分为一组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意点使用 * 无法查询解决方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 关闭 ONLY_FULL_GROUP_BY&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 查询：**SELECT @@sql_mode;&lt;/p&gt;
&lt;p&gt;** 关闭：**SET SESSION sql_mode=(SELECT REPLACE (@@sql_mode,‘ONLY_FULL_GROUP_BY,’,’’));&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;单独使用 GROUP BY 进行分组&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解释：单独使用 GROUP BY 关键字，查询的是每个分组中的一条记录。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中的数据，按照 sex 字段进行分组&lt;/p&gt;
&lt;p&gt;SELECT * FROM student GROUP BY sex;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;GROUP BY 和聚合函数一起使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解释：GROUP BY 和聚合函数一起使用，可以统计出某个或者某些字段在一个分组中的最大值、最小值、平均值等。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中按照 age 字段进行分组查询，计算出每组共有多少个人。&lt;/p&gt;
&lt;p&gt;SELECT COUNT(*) ,age FROM student GROUP BY age;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;GROUP BY 和 HAVING 关键字一起使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解释：关键 HAVING 字和 WHERE 关键字的作用相同，区别在于 HAVING 关键字可以跟聚合函数，而 WHERE 关键字不能。通常 HAVING 关键字都和 GROUP BY 一起使用，用于对分组后的结果进行过滤。&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中按照 sex 字段进行分组查询，查询出 age 字段值之和小于 300 的分组&lt;/p&gt;
&lt;p&gt;SELECT sum(age),sex FROM student GROUP BY sex HAVING SUM(age) &amp;lt; 300;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;使用 LIMIT 限制查询结果的数量&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT 字段名 2，字段名 2，…FROM 表名 LIMIT 记录数 [OFFSET] 记录数   LIMIT Y OFFSET X 向后偏移 x 位。&lt;/p&gt;
&lt;p&gt;解释：在此语法中，LIMIT 后面可以跟两个参数，第一个参数 “OFFSET” 表示偏移量，如果偏移量为 0，则从查询结果的第一条记录开始，偏移量为 1 则从查询结果中的第二条记录开始，以此类推。OFFSET 为可选值，默认值为 0，第二个参数 “记录数” 表示指定返回查询记录的条数。&lt;/p&gt;
&lt;p&gt;例题：查询 tudent 表中的前四条记录&lt;/p&gt;
&lt;p&gt;SELECT * FROM student LIMIT 4;&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中从 0 开始查询 4 条记录&lt;/p&gt;
&lt;p&gt;SELECT * FROM student LIMIT 0,4;&lt;/p&gt;
&lt;h4 id=&#34;5为表和字段取别名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5为表和字段取别名&#34;&gt;#&lt;/a&gt; ⑤：为表和字段取别名&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;为表取别名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT * FROM 表名 [AS] 别名；&lt;/p&gt;
&lt;p&gt;解释：在进行查询操作时，如果表名很长使用起来不方便，可以为表取一个别名来代替表的名称。&lt;/p&gt;
&lt;p&gt;例题：为 student 表起一个别名 s，并查询 student 表中 sex 字段值为 “woman” 的记录&lt;/p&gt;
&lt;p&gt;SELECT * FROM student AS s WHERE s.sex=‘woman’;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;为字段取别名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：SELECT 字段名 [AS] 别名 [ , 字段名 [AS] 别名，…]  FROM 表名 ；&lt;/p&gt;
&lt;p&gt;例题：查询 student 表中的所有记录的 name 和 sex 字段值，并为这两个字段起别名 stu_name 和 stu_sex&lt;/p&gt;
&lt;p&gt;SELECT name AS stu_name,sex AS stu_gender FROM student;&lt;/p&gt;
&lt;h4 id=&#34;6子查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6子查询&#34;&gt;#&lt;/a&gt; ⑥：子查询&lt;/h4&gt;
&lt;p&gt;select name from student where id &amp;lt; (select age from student where name=‘sunce’);&lt;/p&gt;
&lt;h4 id=&#34;7联合查询union&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7联合查询union&#34;&gt;#&lt;/a&gt; ⑦：联合查询 (union)&lt;/h4&gt;
&lt;p&gt;select version() union select user();&lt;/p&gt;
&lt;h4 id=&#34;8利用内置表查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8利用内置表查询&#34;&gt;#&lt;/a&gt; ⑧：利用内置表查询&lt;/h4&gt;
&lt;p&gt;查询数据库：select schema_name from information_schema.schemata;&lt;/p&gt;
&lt;p&gt;查询表名：select table_name from information_schema.tables;&lt;/p&gt;
&lt;p&gt;查询列名：select column_name from information_schema.columns;&lt;/p&gt;
&lt;h2 id=&#34;3mysql内置库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3mysql内置库&#34;&gt;#&lt;/a&gt; 3：MySQL 内置库&lt;/h2&gt;
&lt;p&gt;在 MySQL&amp;gt;5.0 的版本中，把 information_schema 看作是一个自带的内置数据库，确切说是信息数据库。它保存着关于 MySQL 服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624967706011-2b5e90b5-ea52-4107-97a0-d99cb6039107.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里我们重点学习下 schemata、tables、columns 以及相关的字段名。&lt;/p&gt;
&lt;p&gt;schemata 表：这里重点关注 schema_name 这个字段，它存放着所有数据库库名，在 SQL 注入中我们可以使用它来进行来查询所有数据库，然后进行高权限的跨库查询。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624967811455-d3098f47-9ed7-4a22-9401-701bf34b31b4.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;tables 表：tables 表用来存储所有数据库里的表名等信息，其中 table_schema 列用来存放所有数据库的库名，table_name 用来存放 MySQL 数据库中的所有表名。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624967881665-67dbdee8-bac7-4300-91d8-944fab32f5ef.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;columns 表：columns 表用来存放数据库里的所有字段信息，其中 table_schema 列用来存放数据库库名，table_name 列用来存放所有数据库里的所有表名，column_name 列用来存放所有的字段 / 内容 (值)。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624967944575-c3a0814a-eef7-4f50-a9ad-20eb70b335f7.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4sql中tips&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4sql中tips&#34;&gt;#&lt;/a&gt; 4：SQL 中 tips&lt;/h2&gt;
&lt;h3 id=&#34;41符号运用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41符号运用&#34;&gt;#&lt;/a&gt; 4.1：符号运用&lt;/h3&gt;
&lt;p&gt;=  				      数据库的赋值符号&lt;/p&gt;
&lt;p&gt;or/||                逻辑或 左右两边有一条成立 那么返回 true 否则 false&lt;/p&gt;
&lt;p&gt;xor  		          逻辑异或。 如果任一操作数为 NULL，则返回 NULL。 对于非 NULL 操作数，如果奇数个操作数非零，则求值为 1，否则返回 0。&lt;strong&gt;（相同为 0，不同为 1，n 个非零元素异或，当 n=even 是，结果为 0，否则为 1。任意与 0 异或结果为 0）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;amp;&amp;amp;/And  		   逻辑与，并且的意思  左右两边的条件必须同时成立则返回 true 否则返回 false&lt;/p&gt;
&lt;p&gt;NOT/！ 			逻辑非（取反）&lt;/p&gt;
&lt;p&gt;+、-、*、/  	  运算符 加减乘除&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624929024527-b541b18d-8b6e-43f9-82ab-831a9e5c9923.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;42常用注释符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42常用注释符&#34;&gt;#&lt;/a&gt; 4.2：常用注释符&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;在 MySQL 中，常见的注释符有以下几种：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;#&lt;/li&gt;
&lt;li&gt;–空格&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;/**/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内联注释符及特性：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;/*！code */&lt;/li&gt;
&lt;li&gt;内联注释符是一种基于注块注释衍生出来的注释风格，它可以用于整个 SQL 语句中，用来执行 SQL 语句，内联注释有个特殊点，和 MySQL 版本息息相关，也就是 **：** 当内联注释中出现小于或等于当前版本号的时候，内联注释符里的子句会被执行，大于时则不会被执行，注意版本的写法，例如，5.5.34，在内联注释中需要写为 50534，版本号第二位加 0，然后注意版本号和内联注释中间不能有空格。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常见的空格符号：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;两个空格代替一个空格，用 Tab 代替空格，% a0 = 空格&lt;/li&gt;
&lt;li&gt;%20 (空格)  %09 (tab)  %0a (回车符)  %0b  %0c  %0d  % a0 (空格)  %00  /**/   /&lt;em&gt;!&lt;/em&gt;/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;43内联注释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#43内联注释&#34;&gt;#&lt;/a&gt; 4.3：内联注释&lt;/h3&gt;
&lt;p&gt;select user()/&lt;em&gt;version()&lt;/em&gt;/;&lt;/p&gt;
&lt;h3 id=&#34;44常见空格表示符号&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#44常见空格表示符号&#34;&gt;#&lt;/a&gt; 4.4：常见空格表示符号&lt;/h3&gt;
&lt;p&gt;两个空格代替一个空格，用 Tab 代替空格，%0a = 空格&lt;/p&gt;
&lt;p&gt;%20 %09 %0a %0b %0c %0d %a0 %00 /**/  /&lt;em&gt;!&lt;/em&gt;/&lt;/p&gt;
&lt;h2 id=&#34;5注入中常见的sql函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5注入中常见的sql函数&#34;&gt;#&lt;/a&gt; 5：注入中常见的 sql 函数&lt;/h2&gt;
&lt;h4 id=&#34;51rand函数-生成一个0~1之间的随机数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51rand函数-生成一个0~1之间的随机数&#34;&gt;#&lt;/a&gt; 5.1：rand () 函数   // 生成一个 0~1 之间的随机数&lt;/h4&gt;
&lt;p&gt;语句：select rand ();&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624929148650-eccd1dda-ba29-4049-b816-168c0f64fa09.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;52floor函数-向下取整&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#52floor函数-向下取整&#34;&gt;#&lt;/a&gt; 5.2：floor () 函数  // 向下取整&lt;/h4&gt;
&lt;p&gt;语句：select floor (rand ()*2);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624929209234-04ac7c50-08e5-4c88-a27e-8ff3c14ef347.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;53concat函数-将符合条件的同一列中的不同行数据进行拼接选择好数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#53concat函数-将符合条件的同一列中的不同行数据进行拼接选择好数据库&#34;&gt;#&lt;/a&gt; 5.3：concat () 函数  // 将符合条件的同一列中的不同行数据进行拼接，选择好数据库&lt;/h4&gt;
&lt;p&gt;语句：concat (0x3a,database (),0x3a)；0x3a 为：号（将第一个参数所对应的符号加在数据库名的前面，将第三个参数所对应的符号加在数据库名的后面，1 与 3 的参数可以不同）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624929359753-7f7979eb-dba0-48a3-8981-e84695b086fb.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;54concat_ws函数-第一个参数是其它参数的分隔符-分隔符的位置在连接的两个字符串之间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#54concat_ws函数-第一个参数是其它参数的分隔符-分隔符的位置在连接的两个字符串之间&#34;&gt;#&lt;/a&gt; 5.4：concat_ws () 函数 // 第一个参数是其它参数的分隔符。分隔符的位置在连接的两个字符串之间。&lt;/h4&gt;
&lt;p&gt;语句：select concat_ws (’!’,database (),‘haha’);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624929389387-5572ea2e-3a07-4d95-b94e-fde752a8cb0b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;55group_concat&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#55group_concat&#34;&gt;#&lt;/a&gt; 5.5：group_concat&lt;/h4&gt;
&lt;p&gt;语句：select group_concat (username,’~’,password) from dh_admin_user;（将从表中所查询的两个数据之间用 “~” 连接）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624931767147-af72cb2c-ed63-4ec2-a0ea-1256df921083.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;56extractvalue函数-对xml文档进行查询的函数-语法extractvalue目标xml文档xml路径&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#56extractvalue函数-对xml文档进行查询的函数-语法extractvalue目标xml文档xml路径&#34;&gt;#&lt;/a&gt; 5.6：extractvalue () 函数  // 对 xml 文档进行查询的函数  语法：extractvalue (目标 xml 文档，xml 路径).&lt;/h4&gt;
&lt;p&gt;语句：select extractvalue (‘anything’,concat (’~’,(select user ())));&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624929938865-59d56ded-02a0-4bb3-8837-1474b8fc16d2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;57sleep函数-对数据库进行延时的函数-语法后面直接跟需要延时的时间即可默认单位为s&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#57sleep函数-对数据库进行延时的函数-语法后面直接跟需要延时的时间即可默认单位为s&#34;&gt;#&lt;/a&gt; 5.7：sleep () 函数  // 对数据库进行延时的函数  语法：后面直接跟需要延时的时间即可，默认单位为 s&lt;/h4&gt;
&lt;p&gt;语句：select sleep (5);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624929977076-b73b5d9b-b4db-4684-ae9f-029cc07ce860.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;58updatexml-语法updatexml目标xml文档xml路径更新的内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#58updatexml-语法updatexml目标xml文档xml路径更新的内容&#34;&gt;#&lt;/a&gt; 5.8：updatexml ()  // 语法 updatexml (目标 xml 文档，xml 路径，更新的内容)&lt;/h4&gt;
&lt;p&gt;语句：select  updatexml (‘anything’,concat (’~’,(select version ())),‘xxx’);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624930123017-4d848866-90d2-4ef4-bdb7-2a4b53a42e41.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;59exp函数-此函数返回e自然对数的底的x次方的值用于将e提升为指定数字的幂当传递一个大于709的值时函数exp就会引起一个溢出错误&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#59exp函数-此函数返回e自然对数的底的x次方的值用于将e提升为指定数字的幂当传递一个大于709的值时函数exp就会引起一个溢出错误&#34;&gt;#&lt;/a&gt; 5.9：exp () 函数  // 此函数返回 e (自然对数的底) 的 X 次方的值，用于将 E 提升为指定数字的幂，当传递一个大于 709 的值时，函数 exp () 就会引起一个溢出错误。&lt;/h4&gt;
&lt;p&gt;语句：select exp (2);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624930667186-832c967d-009b-48a4-99f6-a41dce583328.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;510length函数-返回参数的长度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#510length函数-返回参数的长度&#34;&gt;#&lt;/a&gt; 5.10：length () 函数 // 返回参数的长度&lt;/h4&gt;
&lt;p&gt;语句：select length (user ());&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624930725308-365094cc-7005-4216-84f5-a5e11ae4980e.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;511substr函数-从字符串-s-的-start-位置截取长度为-length-的子字符串select-substruser12&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#511substr函数-从字符串-s-的-start-位置截取长度为-length-的子字符串select-substruser12&#34;&gt;#&lt;/a&gt; 5.11：substr () 函数  // 从字符串 s 的 start 位置截取长度为 length 的子字符串，select substr (user (),1,2);&lt;/h4&gt;
&lt;p&gt;语句：select substr (user (),1,2);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624930882499-d7677dca-e200-4ad1-93c8-8e8a6706222c.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;512substring函数left-mid函数-同substr&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#512substring函数left-mid函数-同substr&#34;&gt;#&lt;/a&gt; 5.12：substring () 函数，left () ,mid () 函数  // 同 substr&lt;/h4&gt;
&lt;p&gt;语句：select substring (user (),1,2);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624930922336-8bb88c57-3926-4b59-b0ff-b11e61283af2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;语句：select left (user (),5);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624930980586-47f5ecd5-6cdf-4723-a569-2ff1a8f50c0b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;语法：select mid (user (),1);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624931908776-b7abf795-40c1-4823-b882-d4487316f3be.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;513ascii-ord函数返回第一个字符的ascii码-返回字符的ascii码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#513ascii-ord函数返回第一个字符的ascii码-返回字符的ascii码&#34;&gt;#&lt;/a&gt; 5.13：ascii ()、ord () 函数返回第一个字符的 ascii 码  // 返回字符的 ascii 码&lt;/h4&gt;
&lt;p&gt;语句：select ascii (mid (user (),1));&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624931962396-a342ce33-66c9-4e78-9630-c843375f6b54.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;语句：select ord (mid (user (),1));&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624932124508-2b7890f3-dd57-4e32-8b0f-129615c1e249.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;514name_const函数-构造一个临时列列名为xx值为xx&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#514name_const函数-构造一个临时列列名为xx值为xx&#34;&gt;#&lt;/a&gt; 5.14：name_const () 函数  // 构造一个临时列，列名为 xx, 值为 xx&lt;/h4&gt;
&lt;p&gt;语句：select name_const (‘name’,15);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624932717111-cbe16c5f-28c6-41e8-80c6-19cff66271ce.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;515strcmp函数-strcmp函数是string-compare字符串比较的缩写用于比较两个字符串并根据比较结果返回整数-基本形式为strcmpstr1str2若str1str2则返回零若str1str2则返回负数若str1str2则返回正数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#515strcmp函数-strcmp函数是string-compare字符串比较的缩写用于比较两个字符串并根据比较结果返回整数-基本形式为strcmpstr1str2若str1str2则返回零若str1str2则返回负数若str1str2则返回正数&#34;&gt;#&lt;/a&gt; 5.15：strcmp () 函数  //strcmp 函数是 string compare (字符串比较) 的缩写，用于比较两个字符串并根据比较结果返回整数。基本形式为 strcmp (str1,str2)，若 str1=str2，则返回零；若 str1&amp;lt;str2，则返回负数；若 str1&amp;gt;str2，则返回正数&lt;/h4&gt;
&lt;p&gt;​	语句：select strcmp (version (),user ());&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624932788443-397f7a1f-e68f-4b50-995f-1c8e51fa357b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;516ifabc-如果a为真则返回b否则返回c&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#516ifabc-如果a为真则返回b否则返回c&#34;&gt;#&lt;/a&gt; 5.16：if (a,b,c) // 如果 a 为真，则返回 b，否则返回 c&lt;/h4&gt;
&lt;p&gt;语句：select if (length (database ())=5,1,0);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624933121237-653ae586-4cfe-434e-a054-092d81d9457d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;517benchmarkcountexpr-重复计算expr表达式count次&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#517benchmarkcountexpr-重复计算expr表达式count次&#34;&gt;#&lt;/a&gt; 5.17：BENCHMARK (count,expr) // 重复计算 expr 表达式 count 次&lt;/h4&gt;
&lt;p&gt;语句：select benchmark (5,1);&lt;/p&gt;
&lt;p&gt;执行表达式 expr count 次，返回的结果都是 0。看返回结果是没有任何意义的，它的意义在于可以得到计算 count 次表达式 expr 后所需要的时间。表达式可以是 sql 语句，这样就可以看出一个 sql 语句写出来后效率怎么样，从而进行一定的优化。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624933324230-2a56d0b8-54bd-4f77-bde5-91afa1c75c80.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;518locate函数-locatesubstrstr返回substr字符串在str中出现的位置没有返回0&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#518locate函数-locatesubstrstr返回substr字符串在str中出现的位置没有返回0&#34;&gt;#&lt;/a&gt; 5.18：locate () 函数  //locate (substr,str) 返回 substr 字符串在 str 中出现的位置，没有返回 0&lt;/h4&gt;
&lt;p&gt;语句：select locate (‘r’,user ());&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624933413558-f0cb0ce0-325d-4489-a3c5-bacb1b81b825.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;519position函数-positionsubstr-in-str返回substr字符串在str中出现的位置没有返回0&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#519position函数-positionsubstr-in-str返回substr字符串在str中出现的位置没有返回0&#34;&gt;#&lt;/a&gt; 5.19：position () 函数 //position (substr in str) 返回 substr 字符串在 str 中出现的位置，没有返回 0&lt;/h4&gt;
&lt;p&gt;语句：select position (‘r’ in user ());&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624933444407-7c8aee41-20ee-4317-a24f-942714a2fcce.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;520instr函数-instrstrsubstr返回substr字符串在str中出现的位置与locate相同只是参数顺序相反&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#520instr函数-instrstrsubstr返回substr字符串在str中出现的位置与locate相同只是参数顺序相反&#34;&gt;#&lt;/a&gt; 5.20：instr () 函数  //instr (str,substr) 返回 substr 字符串在 str 中出现的位置，与 locate 相同，只是参数顺序相反&lt;/h4&gt;
&lt;p&gt;​	语句：select instr (‘qweasdzXC’,‘w’);&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1624933537950-c57e8210-0b9a-44bf-bac2-35a2a9de07ee.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;521hexunhex函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#521hexunhex函数&#34;&gt;#&lt;/a&gt; 5.21：hex ()&amp;amp;unhex () 函数&lt;/h4&gt;
&lt;p&gt;渗透中有些注入点因为数据库中对数据字段的类型定义，可能不支持 union 来显示某些不同类型的内容，所以使用 hex 对数据进行十六进制编码；&lt;/p&gt;
&lt;p&gt;hex 参数可用于任何参数外面&lt;/p&gt;
&lt;p&gt;select hex(concat(user(),1));&lt;/p&gt;
&lt;p&gt;select hex(user()),hex(database())；&lt;/p&gt;
&lt;p&gt;unhex () 则是用来将十六进制的内容转换回十进制&lt;/p&gt;
&lt;p&gt;select unhex(‘726F6F74406C6F63616C686F737431’);&lt;/p&gt;
&lt;h4 id=&#34;522load_file函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#522load_file函数&#34;&gt;#&lt;/a&gt; 5.22：load_file () 函数&lt;/h4&gt;
&lt;p&gt;load_file () 函数是 MySQL 读取本地 / 远程文件的函数&lt;/p&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;必须有权限读取且文件是可读的，低权限无法读取高权限用户文件&lt;/li&gt;
&lt;li&gt;被文件必须在服务器上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;必须知道文件的绝对路径   可用：select @@basedir;&lt;/li&gt;
&lt;li&gt;读取的文件必须小于设定：max_allowed_packet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;secure_file_priv 的值不为 NULL   使用 show global variables like ‘% secure%’; 查询是否为空，在 my.ini 设置为：secure_file_priv = ‘’&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;查询结果为：secure_file_priv  NULL 时，表示不允许导入导出；&lt;/li&gt;
&lt;li&gt;查询结果为：secure_file_priv  /xxx/ 时，表示只允许在当前目录导入导出；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;查询结果为：secure_file_priv（空白）时，表示可以在任意目录进行导入导出；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows：my.ini 中添加 secure_file_priv=&lt;/p&gt;
&lt;p&gt;Linux：/etc/my.cnf 的 [mysqld] 下面添加 local-infile=0&lt;/p&gt;
&lt;p&gt;语法：select load_file (‘D:/phpstudy_pro/Extensions/MySQL5.7.26/my.ini’);&lt;/p&gt;
&lt;h4 id=&#34;523into-outfile函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#523into-outfile函数&#34;&gt;#&lt;/a&gt; 5.23：into outfile () 函数&lt;/h4&gt;
&lt;p&gt;into outfile () 函数是用来导出文件的&lt;/p&gt;
&lt;p&gt;用法示例：select “hello word” into outfile ‘D:\phpstudy_pro\WWW\1.txt’;&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;在 SQL 注入时，我们可以利用 load_file 或者 into outfile () 对文件进行读取，或者写入 Webshell；&lt;/li&gt;
&lt;li&gt;若过滤了单引号，则可以将函数中的字符进行 hex 编码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueXVxdWUuY29tL2F0dGFjaG1lbnRzL3l1cXVlLzAvMjAyMS9zcWwvMjY5OTc1MC8xNjI3MzU2MzYzMDc1LTgyNTJkNDAwLTlkNjYtNDM1Ny05MjEwLTllYTFjNWNiNmVkMC5zcWw=&#34;&gt;📎SQL 语句详细笔记.sql&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueXVxdWUuY29tL2F0dGFjaG1lbnRzL3l1cXVlLzAvMjAyMS9tZC8yNjk5NzUwLzE2MjczNTYzNjMwNjEtYjNkZjRjN2ItMzEwMi00NjhjLThkYWEtZDkxNmJhYjZjZDVjLm1k&#34;&gt;📎mysql 数据库笔记.md&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2022-01-15T12:05:00.000Z</updated>
    </entry>
    <entry>
        <id>https://sun-spots.github.io/2022/01/13/web%E7%AB%99%E7%82%B9%E6%90%AD%E5%BB%BA/</id>
        <title>web站点搭建</title>
        <link rel="alternate" href="https://sun-spots.github.io/2022/01/13/web%E7%AB%99%E7%82%B9%E6%90%AD%E5%BB%BA/"/>
        <content type="html">&lt;h1 id=&#34;web站点搭建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#web站点搭建&#34;&gt;#&lt;/a&gt; web 站点搭建&lt;/h1&gt;
&lt;h3 id=&#34;一基础知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一基础知识&#34;&gt;#&lt;/a&gt; 一：基础知识&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 网站&lt;/strong&gt;：指在因特网上根据一定的规则，使用 HTML、CSS、jsp 等脚本语言与工具制作的用于展示特定内容相关网页的集合。简单地说，网站是一种沟通工具，人们可以通过网站来发布自己想要公开的资讯，或者利用网站来提供相关的网络服务。人们可以通过网页浏览器来访问网站，获取自己需要的资讯或者享受网络服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网站的分类&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根据网站所用编程语言分类：例如 asp 网站、php 网站、jsp 网站、Asp. net 网站等；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据网站的用途分类：例如门户网站（综合网站）、行业网站、娱乐网站等；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根据网站的功能分类：例如单一网站（企业网站）、多功能网站（网络商城）等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据网站的持有者分类：例如个人网站、商业网站、政府网站、教育网站等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;根据网站的商业目的分类：营利型网站（行业网站、论坛）、非营利性型网站（企业网站、政府网站、教育网站）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;适合类型：ASP（个人）、PHP（企业，门户，商务）、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FTUC5ORVQ=&#34;&gt;ASP.NET&lt;/span&gt;（企业，门户，商务）&lt;br&gt;
PHP（不适合大型）&amp;gt;NET（比较适合中、大型）&lt;br&gt;
JSP&amp;gt;PHP &amp;gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FTUC5ORVQ=&#34;&gt;ASP.NET&lt;/span&gt;，比如安全高、安全中、安全低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 域名&lt;/strong&gt;：简称域名、网域，是由一串用点分隔的名字组成的 Internet 上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。PS: 域名会被解析到一个唯一的公网 IP 地址上，当然通过 IP 也是可以去对网站进行访问。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2942226/1623390545612-7c2ca0fe-6815-4c3c-b47f-d296827dc125.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 空间&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;常见网站空间：虚拟主机（虚拟空间），独立服务器，云主机，VPS。&lt;/p&gt;
&lt;p&gt;虚拟主机：是在网络服务器上划分出一定的磁盘空间供用户放置站点、应用组件等；提供必要的站点功能、数据存放和传输功能。所谓虚拟主机，也叫 “网站空间”，就是把一台运行在互联网上的服务器划分成多个 “虚拟” 的服务器。每一个虚拟主机都具有独立的域名和完整的 Internet 服务器（支持 WWW、FTP、E-mail 等）功能。&lt;/p&gt;
&lt;p&gt;云主机 /vps: 云主机又称为云计算服务器或云服务器，是云计算服务体系中的一项主机产品。云 z 主机是一种类似 VPS 服务器的虚拟化技术。也可以理解是 VPS 的升级版，与 VPS 还有所不同是，它是在一组集群服务器上划分出来的多个类似独立主机的部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.web 网站的四大组成部分&lt;/strong&gt;：服务器、数据库、web 容器（中间件）、脚本语言&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.web 容器简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;web 容器就是一种服务程序，在服务器中一个端口就对应一个提供相应服务的程序（比如 Apache 默认的端口为 80），而这个程序就是处理服务器从客户端收到的请求，如 Java 中的 Tomcat 容器，ASP 的 IIS 都是这样的容器。一个服务器可以有多个容器。&lt;/p&gt;
&lt;p&gt;常见的 WEB 容器：IIS、Apache、Nginx、Tomcat、Jboss、WebLogic&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 脚本语言介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;脚本语言是一种 web 端的网页源代码。它又分为静态和动态网站。&lt;/p&gt;
&lt;p&gt;静态：不与数据库发生交互，包括 html、html5、shtml。&lt;/p&gt;
&lt;p&gt;动态：与数据库进行交互来获取、存储数据，包括 asp、aspx、php、jsp 等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. 数据库介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库是存放数据的仓库。它的存储空间很大，可以存放百万条、千万条、上亿条数据。但是数据库并不是随意地将数据进行存放，是有一定的规则的，否则查询的效率会很低。&lt;/p&gt;
&lt;p&gt;常见的数据库：&lt;/p&gt;
&lt;p&gt;Access 数据库：小型数据库，性能低，安全性低，无需登录账号密码。&lt;/p&gt;
&lt;p&gt;Sqlserver 数据库：轻量级中小型，也叫 mssql 数据库，微软的数据库，需要登录账户密码，最高权限管理员名称：sa。&lt;/p&gt;
&lt;p&gt;Mysql 数据库：轻量级，需要账户密码，被 Oracle 收购了，最高权限	管理员名称：root。&lt;/p&gt;
&lt;p&gt;Oracle 数据库：属于甲骨文公司，大型数据库，一个数据库可以建立很多数据库，最高权限管理员名称： sys。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Mirsoft ACCESS &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mirsoft SQLServer &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MySQL（ORACLE）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;8. 服务器介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.1 简介&lt;/strong&gt;：服务器是一种高性能计算机，某方面其性能是普通计算机的几倍甚至更多，它作为网络节点，提供文件存储等服务，供客户端数据等服务，是互联网的灵魂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.2 常见的服务器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Windows：&lt;/p&gt;
&lt;p&gt;Windows server2003	IIS6.0&lt;/p&gt;
&lt;p&gt;Windows server2008	IIS7.0&lt;/p&gt;
&lt;p&gt;Windows server2012	IIS8.0&lt;/p&gt;
&lt;p&gt;Windows server2016	IIS8.5&lt;/p&gt;
&lt;p&gt;Windows10			IIS10.0&lt;/p&gt;
&lt;p&gt;Linux：&lt;/p&gt;
&lt;p&gt;Ubuntu&lt;/p&gt;
&lt;p&gt;Red Hat Enterprise Linux (RHEL)&lt;/p&gt;
&lt;p&gt;SUSE Linux Enterprise Server&lt;/p&gt;
&lt;p&gt;CentOS (Community OS) Linux Server&lt;/p&gt;
&lt;p&gt;Debian&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.3web 常见的网站搭建架构：&lt;/strong&gt;&lt;br&gt;
Windows + IIS + Access + asp/aspx&lt;br&gt;
Windows + IIS + SQLserver + asp/aspx&lt;br&gt;
Windows + APache + Mysql + PHP&lt;br&gt;
Windows + Nginx + Mysql/ORACLE + JSP&lt;/p&gt;
&lt;p&gt;Linux + Apache + Mysql + PHP  (LAMP)&lt;br&gt;
Linux + Nginx + Mysql + PHP (LNMP)&lt;br&gt;
Linux + Apache + Mysql + JSP&lt;br&gt;
Linux + Nginx + Oracle + JSP&lt;br&gt;
Linux + Tomcat、Jboss、WebLogic + MySQL/Oracle + Jsp&lt;/p&gt;
&lt;h3 id=&#34;二web服务器搭建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二web服务器搭建&#34;&gt;#&lt;/a&gt; 二：web 服务器搭建&lt;/h3&gt;
&lt;p&gt;window serivce2016：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在服务器管理器界面点击 “添加角色与功能”&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114223535287.png&#34; alt=&#34;image-20220114223535287&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装类型与服务器选择均默认，服务器角色选择 -----web 服务器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114223741914.png&#34; alt=&#34;image-20220114223741914&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能选择 -----IIS 可承载 web 核心&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114223915724.png&#34; alt=&#34;image-20220114223915724&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在此页面下找到以下选项选中即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114224044961.png&#34; alt=&#34;image-20220114224044961&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开管理工具，选择 internet information service&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114224406509.png&#34; alt=&#34;image-20220114224406509&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择网站右键添加网站&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114224518459.png&#34; alt=&#34;image-20220114224518459&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;填写网络名称、物理路径，将应用程序池改为图中值并选择 ip&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114224858216.png&#34; alt=&#34;image-20220114224858216&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;右键点击创建的网站，重新启动即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114225040107.png&#34; alt=&#34;image-20220114225040107&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3常见的错误&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3常见的错误&#34;&gt;#&lt;/a&gt; 3 常见的错误&lt;/h3&gt;
&lt;p&gt;3.1 若浏览器中出现文件夹中所有的文件，而没有出现初始页面，则此时应该在默认文档中加入网站初始页面的文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114225827199.png&#34; alt=&#34;image-20220114225827199&#34;&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114225854186.png&#34; alt=&#34;image-20220114225854186&#34;&gt;&lt;/p&gt;
&lt;p&gt;3.2 若浏览器中出现 403 错误，此时文件目录的访问权限出现问题，修改目录浏览，启用即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114230059829.png&#34; alt=&#34;image-20220114230059829&#34;&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114230207160.png&#34; alt=&#34;image-20220114230207160&#34;&gt;&lt;/p&gt;
&lt;p&gt;3.3 若浏览器中出现数据库文件出错相关的问题。可以尝试将应用程序池中的 Class.Net 中的高级设置中的启用 32 位应用程序设置为 true&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Criyun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220114230341805.png&#34; alt=&#34;image-20220114230341805&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2022-01-13T15:05:00.000Z</updated>
    </entry>
</feed>
