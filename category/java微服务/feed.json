{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"java微服务\" category",
    "description": "",
    "home_page_url": "https://sun-spots.github.io",
    "items": [
        {
            "id": "https://sun-spots.github.io/2022/04/13/java%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%B3%9B%E5%9E%8B/",
            "url": "https://sun-spots.github.io/2022/04/13/java%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%B3%9B%E5%9E%8B/",
            "title": "java泛型基础知识",
            "date_published": "2022-04-13T05:50:57.938Z",
            "content_html": "<h3 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\">#</a> 泛型</h3>\n<h5 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h5>\n<p>Java 泛型（generics）是 JDK 5 中引入的一个新特性，泛型提供了编译时类型安全检测机制，可以解决数据类型的安全问题 (不统一)，主要原理是在类声明时候通过一个标识符标识类中某个属性或方法的返回值，这样在类声明或实例化时再指定数据类型。该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法中，分别被称为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlQjMlOUIlRTUlOUUlOEIlRTclQjElQkImYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">泛型类</span>、泛型接口、泛型方法。</p>\n<p>本质：类声明或实例化时再指定具体数据类型。泛型是在面向对象的基础上发展起来的，换句话说，泛型是在引用传递的基础上发展起来的。</p>\n<h5 id=\"泛型类\"><a class=\"markdownIt-Anchor\" href=\"#泛型类\">#</a> 泛型类</h5>\n<p>泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericClass</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GenericClass</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//TODO 1:泛型类</span></span><br><span class=\"line\">GenericClass&lt;String&gt; name = <span class=\"keyword\">new</span> GenericClass&lt;&gt;(<span class=\"string\">&quot;hellow&quot;</span>);</span><br><span class=\"line\">System.out.println(name.getValue());</span><br><span class=\"line\">GenericClass&lt;Integer&gt; number = <span class=\"keyword\">new</span> GenericClass&lt;&gt;(<span class=\"number\">123</span>);</span><br><span class=\"line\">System.out.println(number.getValue());</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">hellow</span><br><span class=\"line\"><span class=\"number\">123</span></span><br><span class=\"line\">---------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>注意事项：泛型类型必须是引用类型（非基本数据类型）</p>\n<p>定义泛型类，在类名后添加一对尖括号，并在尖括号中填写类型参数，参数可以有多个，多个参数使用逗号分隔：</p>\n<p>public class 类名 &lt;泛型类型 1,…&gt; {}</p>\n<p>当然，这个后面的参数类型也是有规范的，不能像上面一样随意，通常类型参数我们都使用大写的单个字母表示：</p>\n<pre><code>T：任意类型 type\nE：集合中元素的类型 element\nK：key-value形式的key\nV： key-value形式的value\n</code></pre>\n<h5 id=\"泛型方法\"><a class=\"markdownIt-Anchor\" href=\"#泛型方法\">#</a> 泛型方法</h5>\n<p>泛型方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。下面是定义泛型方法的规则：</p>\n<ul>\n<li>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前。</li>\n<li>每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。</li>\n<li>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。</li>\n<li>泛型方法体的声明和其他方法一样。注意类型参数只能代表引用型类型，不能是原始类型（像 <strong>int、double、char</strong> 等）。</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://sun-spots.github.io/2022/04/10/java%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "https://sun-spots.github.io/2022/04/10/java%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "java异常基础知识",
            "date_published": "2022-04-10T12:05:00.000Z",
            "content_html": "<h2 id=\"异常\"><a class=\"markdownIt-Anchor\" href=\"#异常\"></a> 异常</h2>\n<p>异常的概念：异常是造成程序中断的一种指令流，如果不对异常进行处理则可以导致程序的中断运行，造成不必要的损失，所以在程序设计中必须考虑各种异常的发生，并正确的做好相应的处理，这样保证程序的正常运行。</p>\n<p><a href=\"https://imgtu.com/i/LeR760\"><img data-src=\"https://s1.ax1x.com/2022/04/12/LeR760.png\" alt=\"LeR760.png\" /></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**java的异常处理机制**：Object是java中任何类的超类。Object下有Throwable（可抛出的），异常对都是派生于Throwable类的一个实例。当java中的内置异常类无法满足用户需要时，可以继承异常类进行编写自己的异常类库。Throwable下有两个分支：Error（不可处理，直接退出JVM）和Exception（可处理的）</span><br><span class=\"line\">Exception下有两个分支：</span><br><span class=\"line\">**编译时异常**（受检异常：CheckedException、受控异常）：</span><br><span class=\"line\">要求程序员在编写程序阶段必须预先对这些异常进行处理，如果不处理编译器则会报错。包括Exception，但不包括其子类RuntimeException</span><br><span class=\"line\">**运行时异常**（未受检异常：UnCheckedException、非受控异常）：在编写程序阶段程序员可以预先处理，也可以不管，当程序出现错误时，可以对出现的异常进行检测或者抛出。</span><br><span class=\"line\">包括：RuntimeException及其子类</span><br><span class=\"line\"></span><br><span class=\"line\">编译时异常和运行时异常，都是发生在运行阶段。编译阶段异常是不会发生的。</span><br><span class=\"line\">所有异常都是在运行阶段发生的。因为只有程序运行阶段才</span><br><span class=\"line\">可以new对象。</span><br><span class=\"line\">因为异常的发生就是new异常对象。</span><br><span class=\"line\"></span><br><span class=\"line\">编译时异常和运行时异常的区别？</span><br><span class=\"line\">编译时异常一般发生的概率比较高。</span><br><span class=\"line\">运行时异常一般发生的概率比较低。</span><br><span class=\"line\"></span><br><span class=\"line\">Java语言中对异常的处理包括两种方式：</span><br><span class=\"line\">第一种方式：在方法声明的位置上，使用throws关键字，抛给上一级。谁调用我，我就抛给谁。</span><br><span class=\"line\"></span><br><span class=\"line\">第二种方式：使用try..catch语句进行异常的捕捉。这件事发生了，谁也不知道，因为我给抓住了。</span><br><span class=\"line\"></span><br><span class=\"line\">注意：Java中异常发生之后如果一直上抛，最终抛给了main方法，main方法继续向上抛，抛给了调用者JVM，JVM知道这个异常发生，只有一个结果。终止java程序的执行。</span><br></pre></td></tr></table></figure>\n<p><strong>异常的捕获机制：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//有可能产生异常的代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>( 异常类  异常对象)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//捕捉异常信息</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(异常类  异常对象)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">..... <span class=\"comment\">//至少匹配一个catch</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//不管有没有异常都会被执行到的程序</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>异常的继承关系分析</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Throwable:</span><br><span class=\"line\">子类：Exception/Error</span><br><span class=\"line\">​\tException的分类： RuntimeException/Exception、</span><br><span class=\"line\">​\tRuntimeException:运行时异常，如果以后碰到RuntimeException，可以不用显式去处理.交给jvm去处理.</span><br><span class=\"line\">​\tException:必须进行显式的处理</span><br><span class=\"line\">既然Throwable是Exception的父类，所有异常是不是可以用Throwable进行接收<span class=\"comment\">//不可以的,因为Throwable也是Error的父类,异常的父类都是Exception</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        IOException ioException = <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;手动new出异常&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行结果：Hello World</span><br><span class=\"line\">注意：自己手动用<span class=\"keyword\">new</span>动态申请出异常跟正常代码一样,不会影响下面代码的执行。非手动<span class=\"keyword\">new</span>出异常则底层会帮我们产生相应的异常对象,然后抛给调用者,如果调用者不处理,则运行会报错将会终止运行,之后的代码就不会执行。</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">   \t<span class=\"comment\">//这里底层会产生java.lang.ArithmeticException,然后抛给main方法这个调用者</span></span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>/<span class=\"number\">0</span>; </span><br><span class=\"line\">   \t<span class=\"comment\">//因为这里没有处理java.lang.ArithmeticException,所以抛给JVM,结果就是直接报错,下面的代码不会运行</span></span><br><span class=\"line\">   \tSystem.out.println(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行结果：运行结果:Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.ArithmeticException: / by zero</span><br></pre></td></tr></table></figure>\n<p><strong>获取异常的两个非常重要的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">异常对象有两个非常重要的方法：</span><br><span class=\"line\">-    获取异常简单的描述信息：String msg = exception.getMessage();</span><br><span class=\"line\">-    打印异常追踪的堆栈信息：exception.printStackTrace();</span><br><span class=\"line\">-    获取造成异常描述信息：exception.getcause();</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionTest08</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 这里只是为了测试getMessage()方法和printStackTrace()方法。</span></span><br><span class=\"line\">       <span class=\"comment\">// 这里只是new了异常对象，但是没有将异常对象抛出。JVM会认为这是一个普通的java对象。</span></span><br><span class=\"line\">       NullPointerException e = <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">&quot;空指针异常fdsafdsafdsafds&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">// 获取异常简单描述信息：这个信息实际上就是构造方法上面String参数。</span></span><br><span class=\"line\">       String msg = e.getMessage(); <span class=\"comment\">//空指针异常fdsafdsafdsafds</span></span><br><span class=\"line\">       System.out.println(msg);</span><br><span class=\"line\">       <span class=\"comment\">// 打印异常堆栈信息</span></span><br><span class=\"line\">       e.printStackTrace();</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>关于try…catch中的finally子句</strong><br />\n在finally子句中的代码是最后执行的，并且是一定会执行的，即使try语句块中的代码出现了异常。<br />\nfinally子句必须和try一起出现，不能单独编写。<br />\nfinally语句通常使用在哪些情况下呢？<br />\n通常在finally语句块中完成资源的释放/关闭。<br />\n因为finally中的代码比较有保障。<br />\n即使try语句块中的代码出现异常，finally中代码也会正常执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionTest10</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       FileInputStream fis = <span class=\"keyword\">null</span>; <span class=\"comment\">// 声明位置放到try外面。这样在finally中才能用。</span></span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 创建输入流对象</span></span><br><span class=\"line\">           fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">&quot;D:\\\\course\\\\02-JavaSE\\\\document\\\\JavaSE进阶讲义\\\\JavaSE进阶-01-面向对象.pdf&quot;</span>);</span><br><span class=\"line\">           <span class=\"comment\">// 开始读文件....</span></span><br><span class=\"line\"></span><br><span class=\"line\">           String s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           <span class=\"comment\">// 这里一定会出现空指针异常！</span></span><br><span class=\"line\">           s.toString();</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">           <span class=\"comment\">// 流使用完需要关闭，因为流是占用资源的。</span></span><br><span class=\"line\">           <span class=\"comment\">// 即使以上程序出现异常，流也必须要关闭！</span></span><br><span class=\"line\">           <span class=\"comment\">// 放在这里有可能流关不了。</span></span><br><span class=\"line\">           <span class=\"comment\">//fis.close();</span></span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span>(IOException e)&#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span>(NullPointerException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;hello 浩克！&quot;</span>);</span><br><span class=\"line\">           <span class=\"comment\">// 流的关闭放在这里比较保险。</span></span><br><span class=\"line\">           <span class=\"comment\">// finally中的代码是一定会执行的。</span></span><br><span class=\"line\">           <span class=\"comment\">// 即使try中出现了异常！</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (fis != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 避免空指针异常！</span></span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// close()方法有异常，采用捕捉的方式。</span></span><br><span class=\"line\">                   fis.close();</span><br><span class=\"line\">               &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;hello kitty!&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">finally</span>面试题</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.yxj.javase.exception;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionTest13</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> result = m();</span><br><span class=\"line\">       System.out.println(result); <span class=\"comment\">//100</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   java语法规则（有一些规则是不能破坏的，一旦这么说了，就必须这么做！）：</span></span><br><span class=\"line\"><span class=\"comment\">       java中有一条这样的规则：</span></span><br><span class=\"line\"><span class=\"comment\">           方法体中的代码必须遵循自上而下顺序依次逐行执行（亘古不变的语法！）</span></span><br><span class=\"line\"><span class=\"comment\">       java中还有一条语法规则：</span></span><br><span class=\"line\"><span class=\"comment\">           return语句一旦执行，整个方法必须结束（亘古不变的语法！）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">m</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> i = <span class=\"number\">100</span>;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 这行代码出现在int i = 100;的下面，所以最终结果必须是返回100</span></span><br><span class=\"line\">           <span class=\"comment\">// return语句还必须保证是最后执行的。一旦执行，整个方法结束。</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           i++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">反编译之后的效果</span></span><br><span class=\"line\"><span class=\"comment\">public static int m()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">   int i = 100;</span></span><br><span class=\"line\"><span class=\"comment\">   int j = i;</span></span><br><span class=\"line\"><span class=\"comment\">   i++;</span></span><br><span class=\"line\"><span class=\"comment\">   return j;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p><strong>final、finally、finalize有什么区别</strong></p>\n<p>final 关键字：final修饰的类无法继承<br />\nfinal修饰的方法无法覆盖<br />\nfinal修饰的变量不能重新赋值。</p>\n<p>finally 关键字：和try一起联合使用，finally语句块中的代码是必须执行的。</p>\n<p>finalize 标识符：是一个Object类中的方法名。这个方法是由垃圾回收器GC负责调用的。</p>\n<p><strong>异常的总结：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionTest</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">   \ttest();<span class=\"comment\">//如果这里不处理的话，下面的代码不会执行</span></span><br><span class=\"line\">   \tSystem.out.println(<span class=\"string\">&quot;不执行&quot;</span>);</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//这里可以省略throws ArithmeticException，因为属于运行时异常，可以不用处理，自然也就可以省略了，结果一样</span></span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//java.lang.ArithmeticException: / by zero 这个属于运行时异常，底层会自动生成异常对象，然后抛给调用者</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-----------------------------------------------------------------------------</span><br><span class=\"line\">运行结果:Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.ArithmeticException: / by zero</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionTest</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            test();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-----------------------------------------------------------------------------</span><br><span class=\"line\">运行结果:执行    因为main方法中对异常进行了捕获，所以程序会执行之后的代码。</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionTest</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//跟普通对象一样,不会影响代码的执行,不管是编译时异常还是运行时异常</span></span><br><span class=\"line\">        NullPointerException nullPointerException = <span class=\"keyword\">new</span> NullPointerException(); </span><br><span class=\"line\">        ClassNotFoundException classNotFoundException = <span class=\"keyword\">new</span> ClassNotFoundException();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;普通对象&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-----------------------------------------------------------------------------</span><br><span class=\"line\">运行结果:普通对象  （手动用<span class=\"keyword\">new</span>创建的异常对象不会对程序的执行造成影响）</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionTest</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        test(); <span class=\"comment\">//如果这里不处理的话，下面的代码不会执行，此时需要使用throws进行异常的抛出或者，使用try对异常进行捕获</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;不执行&quot;</span>);</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">       <span class=\"comment\">//这里可以省略throws NullPointerException，因为属于运行时异常，可以不用处理，自然也就可以省略了，结果一样</span></span><br><span class=\"line\">   \t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();<span class=\"comment\">//这个属于运行时异常，会手动抛给调用者</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\">运行结果:Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.NullPointerException</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionTest</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   \t\ttest(); </span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">   \tSystem.out.println(<span class=\"string\">&quot;执行&quot;</span>); </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  <span class=\"comment\">//这里可以省略throws NullPointerException，因为属于运行时异常，可以不用处理，自然也就可以省略了，结果一样</span></span><br><span class=\"line\">   \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();<span class=\"comment\">//这个属于运行时异常，会手动抛给调用者</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\">运行结果:执行</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionTest</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">   \t <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\ttest(); <span class=\"comment\">//这里需要在编写时处理,因为接收到的是编译时异常,要么try---catch处理,要么throws,否则编译不通过.</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated catch block\t\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   \t System.out.println(<span class=\"string\">&quot;编译时异常&quot;</span>);</span><br><span class=\"line\">   &#125;   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;  <span class=\"comment\">//如果采用throws,这里就不可以省略throws ClassNotFoundException，因为属于编译时异常，要处理，自然就不可以省略了</span></span><br><span class=\"line\">   \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassNotFoundException();<span class=\"comment\">//这个属于编译时异常，需要用try---catch处理或者throws</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\">运行结果:编译时异常</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionTest</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">   \t test();</span><br><span class=\"line\">   \t System.out.println(<span class=\"string\">&quot;执行&quot;</span>);</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span>  </span>&#123;  <span class=\"comment\">//如果采用throws,这里就不可以省略throws ClassNotFoundException，因为属于编译时异常，要处理，自然就不可以省略了</span></span><br><span class=\"line\">   \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassNotFoundException();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//这个属于编译时异常，需要用try---catch处理或者throws</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\">运行结果:java.lang.ClassNotFoundException</span><br><span class=\"line\">\t执行</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   \t\taa();<span class=\"comment\">//这里接受到的是ClassNotFoundException,处于编译时异常，不处理编译器报错</span></span><br><span class=\"line\">   \t\tSystem.out.println(<span class=\"string\">&quot;Hello World1&quot;</span>); <span class=\"comment\">//这里不执行</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (NullPointerException e) &#123; <span class=\"comment\">//没处理ClassNotFoundException</span></span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   \tSystem.out.println(<span class=\"string\">&quot;Hello World2&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">aa</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//这里底层会产生java.lang.ArithmeticException,然后抛给main方法这个调用者</span></span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>/<span class=\"number\">0</span>; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\">编译不通过,没运行结果.</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://sun-spots.github.io/2022/01/10/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/MSSQL%E5%AE%89%E8%A3%85/",
            "url": "https://sun-spots.github.io/2022/01/10/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/MSSQL%E5%AE%89%E8%A3%85/",
            "title": "sql安装",
            "date_published": "2022-01-10T12:05:00.000Z",
            "content_html": "<h1 id=\"mssql安装\"><a class=\"markdownIt-Anchor\" href=\"#mssql安装\">#</a> MSSQL 安装</h1>\n<table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>数据库系统</th>\n<th>系统配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Windows server 2012R2</td>\n<td>SQL Server 2012R2</td>\n<td>内存 4G / 硬盘 40G</td>\n</tr>\n</tbody>\n</table>\n<p>数据库镜像下载地址：</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ed2k://|file|cn_sql_server_2012_enterprise_edition_with_sp1_x64_dvd_1234495.iso|<span class=\"number\">4231520256</span>|EB9F35CAC10578613A6E9D56090BAF06|/    </span><br></pre></td></tr></table></figure>\n<p>步骤一：将 sql server 镜像文件添加到虚拟机中，并在虚拟机中打开</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2021/png/2699750/1624969886291-fc52fd78-cf11-4f53-9128-e365d85733b0.png\" alt=\"img\"></p>\n<p>步骤二：点击安装–&gt; 权限 SQL Server 独立安装或向现有安装添加功能</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2021/png/2699750/1624969951852-28ac96a9-57b4-409a-bee6-ac44cf07bb2a.png\" alt=\"img\"></p>\n<p>步骤三：输入产品密钥，破解版本即我告诉你下载自带激活密钥</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2021/png/2699750/1624970007589-a22581ca-09d9-4f38-9374-2bfeb33dd434.png\" alt=\"img\"></p>\n<p>步骤四：一路回车检测完毕后，到达一下页面选择 SQL Server 功能安装–&gt; 在功能处点击全选</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2021/png/2699750/1624970168419-03103d82-ccf3-41b5-af18-0f1da16998e8.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2021/png/2699750/1624970231406-fcce7d7e-7cbf-44cf-b45c-fa1c0711aab0.png\" alt=\"img\"></p>\n<p>步骤五：在检测完毕后来到实例配置页面选择默认实例即可，进入检测</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2021/png/2699750/1624970298848-12963874-812a-468d-8e83-c890d5259163.png\" alt=\"img\"></p>\n<p>步骤六：检测完毕后，配置身份认证模式选择混合模式并为 SA 账户配置密码</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2021/png/2699750/1624970518373-241b4878-6183-48ef-b497-d0b4e55ed0bc.png\" alt=\"img\"></p>\n<p>步骤七：一路回车，如果遇到问题直接添加当前用户，来到此页面点击安装就完事！</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2021/png/2699750/1624970598907-5e9ace51-b82d-47cf-8dcf-e3362214730d.png\" alt=\"img\"></p>\n<p>步骤八：进行验证操作，使用 SA 身份进行登录</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2021/png/2699750/1624972006387-a4b9169d-0c0b-40ba-ad61-79a419c106f4.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2021/png/2699750/1624971934585-1befded6-e139-4a32-b12d-0a765a0ed377.png\" alt=\"img\"></p>\n",
            "tags": []
        }
    ]
}